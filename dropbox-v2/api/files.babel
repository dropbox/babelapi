namespace files

# Python doesn't support %z so we hardcode +0000 here.
# TODO(kelkabany): Handle this in the Python code generator
alias DbxTimestamp = Timestamp(format="%a, %d %b %Y %H:%M:%S +0000")

alias Rev = String
alias Path = String

struct FileMetadata

    client_modified DbxTimestamp
        "For files, this is the modification time set by the desktop client
        when the file was added to Dropbox. Since this time is not verified
        (the Dropbox server stores whatever the desktop client sends up), this
        should only be used for display purposes (such as sorting) and not,
        for example, to determine if a file has changed or not."
    server_modified DbxTimestamp
        "The last time the file was modified on Dropbox."
    rev Rev
        "A unique identifier for the current revision of a file. This field is
        the same rev as elsewhere in the API and can be used to detect changes
        and avoid conflicts."
    size UInt64
        "The file size in bytes."

struct FolderMetadata
    "Placeholder to make parser work."

union Metadata
    file FileMetadata
    folder FolderMetadata

struct FileMetadataWithName
    name String
    metadata FileMetadata

struct MetadataWithName
    name String
    metadata Metadata

union GetMetadataError
    not_found
        "File was not found at the specified path."

struct GetMetadataRequest
    path Path

route get_metadata (GetMetadataRequest, MetadataWithName, GetMetadataError)
    "Returns the metadata for a file or folder."

struct ListFolderFooter
    cursor String
        "Pass the cursor into :route:`list_folder/continue` to see what's changed
        in the folder since your previous query."
    has_more Boolean
        "If true, then there are more entries available."

struct ListFolderRequest
    path Path

struct ChangeEntry
    name String
    metadata Metadata?

struct ListFolderResponse
    entries List(data_type=ChangeEntry)
    footer ListFolderFooter

union ListFolderError
    not_found
        "There is no file or folder at the given path."
    not_folder
        "Entry at path is not a folder."

    # reset can only ever happen on ListFolderContinue. This demonstrates an
    # issue with Babel-generated unions where ListFolderContinue has a superset
    # of errors of ListFolderInit. It's ideal to share code between the two,
    # but one requires ListFolderError to be returned, whereas the other one
    # would hypothetically require ListFolderContinueError. If both use the
    # same error data type, then ListFolderInit will specify errors that do not
    # actually occur, which is what "reset" is in this case.
    reset
        "Placeholder. This isn't used yet."

route list_folder (ListFolderRequest, ListFolderResponse, ListFolderError)
    "Returns the contents of a folder."

struct ListFolderContinueRequest
    cursor String

union ListFolderContinueEntries
    continue List(data_type=ChangeEntry)
    restart List(data_type=ChangeEntry)

struct ListFolderContinueResponse
    entries ListFolderContinueEntries
    footer ListFolderFooter

route list_folder/continue (ListFolderContinueRequest, ListFolderContinueResponse, ListFolderError)
    "Once a cursor has been retrieved from :route:`list_folder`, use this to
    paginate through all files and retrieve updates to the folder."

struct GetDescendantsRequest
    id String

struct GetDescendantsResponse
    results List(data_type=ChangeEntry)

union GetDescendantsError
    no_permission

route get_descendants (GetDescendantsRequest, GetDescendantsResponse, GetDescendantsError)
    "TODO: Something about file IDs."

union NoFileReason
    not_found Any
    is_folder Any

struct NoFile
    reason NoFileReason

union RestrictedReason
    dmca
    other*

struct Restricted
    reason RestrictedReason

union DisallowedReason
    permission Any
    restricted Restricted

struct Disallowed
    reason DisallowedReason

union DownloadError
    disallowed Disallowed
    no_file NoFile
    other*

struct DownloadRequest
    path Path
    rev Rev?

route download (DownloadRequest, FileMetadataWithName, DownloadError)
    "Download a file in a user's Dropbox."

    attrs
        host="content"
        style="download"

#
# Upload Routes
#

# Errors

union ConflictError
    file
        "A file already exists at this path."
    folder
        "A folder already exists at this path."
    autorename_failed
        "File could not be automatically renamed."
    other*

union CommitError
    conflict ConflictError
    no_write_permission Any
        "User does not have permission to write in the folder. An example of
        this is if the folder is a read-only shared folder."
    insufficient_quota Any
        "User does not have sufficient space quota to save the file."
    other*

struct CommitFailed
    reason CommitError
    upload_id String

struct IncorrectOffset
    correct_offset UInt64

union LookupError
    not_found
        ":field:`upload_id` was not found."
    incorrect_offset IncorrectOffset
        "Upload session was closed."
    closed
    other*

union UploadError
    append_to_failed LookupError
    commit_failed CommitFailed
    append_to LookupError
    other*

# Req/Resp

struct UploadSessionStart
    upload_id String
        "A unique identifier for the upload session."

route upload/start (Empty, UploadSessionStart, Empty)
    "Start an upload session.

    Since this is an upload-style endpoint, a binary payload must be included."

    attrs
        host="content"
        style="upload"

struct UploadAppend
    upload_id String
        "Identifies the upload session to append data to."
    offset UInt64
        "The offset into the file of the current chunk of data being uploaded.
        It can also be thought of as the amount of data that has been uploaded
        so far. We use the offset as a sanity check."

route upload/append (UploadAppend, Empty, LookupError)
    "Start an upload session."

    attrs
        host="content"
        style="upload"

union UploadMode
    "The action to take when a file path conflict exists."

    add
        "If the path is already occupied, the upload is rejected. You can call
        the :route:`upload` endpoint again and try a different path."
    overwrite
        "On a conflict, the target is overridden."
    update Rev
        "On a conflict, only overwrite the target if the revision matches."

struct UploadCommit
    path Path
        "Path in the user's Dropbox to save the file."
    mode UploadMode
        "The course of action to take if a file already exists at :field:`path`."
    append_to UploadAppend?
        "If specified, the current chunk of data should be appended to an
        existing upload session."
    autorename Boolean = false
        "Whether the file should be autorenamed in the event of a conflict."
    client_modified_utc UInt64?
        "Self reported time of when this file was created or modified."
    mute Boolean = false
        "Whether the devices that the user has linked should notify them of the
        new or updated file."

route upload (UploadCommit, FileMetadataWithName, UploadError)
    "Use this endpoint to either finish an ongoing upload session that was
    begun with :route:`upload/start` or upload a file in one shot."

    attrs
        host="content"
        style="upload"

